<pre class='metadata'>
Title: Secure Interface for Video Interactive Creative (SIVIC)
Shortname: SIVIC
Level: 1
Status: LS
Group: IAB
URL: https://interactiveadvertisingbureau.github.io/SIVIC/
Repository: InteractiveAdvertisingBureau/SIVIC
Editor: Pieter Mees, Zentrick, pieter.mees@zentrick.com
Abstract: Establishes a common communication protocol between video players and executable ad units, providing rich ad experiences for viewers.
Markup Shorthands: markdown yes, idl yes, dfn yes
</pre>

# Executive Summary # {#exec-summary}

This Pull Request adds some random text as an example.

The SIVIC standard is intended to address the original mandate of the VPAID spec: to establish a common communication protocol between video players and ad units that allows a single “executable ad” (one that requires software logic to be executed as part of ad playback) to be displayed as an enhancement of standard video advertisement, in any compliant video player, with the result that advertisers using VPAID ads can provide rich ad experiences for viewers and collect ad playback and interaction details that are just as rich as the ad experience.

We'll also remove a paragraph.

By specifying a separation of the video asset from the codebase, VAST 4.0 + has already done some of the work required to resolve the issues above. The SIVIC spec is intended to close the gaps for the purpose of enabling and reporting on rich (interactive and dynamic) video ad experiences. Viewability and verification will now be handled in separate standard efforts.

Additionally, the new standard should support all reasonably well-adopted ad formats currently available using VPAID.

# Intended Audience # {#audience}

Anyone involved in digital video advertising can benefit from being familiar with this specification, however implementation details are targeted toward the developers of executable video ads and of video players intended to support interactive and/or dynamic video ads enabled by the spec. Specifically, video software engineers and video product managers should use this document as a guide when implementing technology designed to support SIVIC.

# Introduction # {#intro}

## Enabling Advanced Video Advertising ## {#enabling-advanced-video-advertising}

Standard video ads are limited in what they can do and what they can track. They play back linearly from start to finish and support only the tracking provided to the publisher in advance via VAST.

In cases where the player environment is capable of supporting execution of code as part of the video playback experience, that code can be used to present the viewer with an array of interactive and/or dynamic features, commonly including additional video or image galleries, more detailed product information, store or dealer locators, and audience-specific personalized elements.

The SIVIC specification is intended to standardize the communication needed between the ad player and the ad creative itself. SIVIC is similar to the VPAID spec that preceded it in this regard.

<img width="100%" src="images/vast-vpaid-player.png" alt="Diagram showing interaction between video player, VAST and VPAID">

Issue: the diagram above will need to be revised to account for SSAI and non-SSAI scenarios

## Video Ad Flow ## {#video-ad-flow}

The process of serving an ad is also more or less unchanged from the earlier VPAID specification, with two main exceptions.

- Access to the video is no longer mediated by the code layer described in this spec, as was the case for VPAID. Pre-caching for mobile and SSAI require direct access to the video and this is reflected in the VAST 4.1 spec, which now separates the video media file from the `InteractiveCreativeFile` asset. Removing this parent-child relationship between the code and the video also no longer allows the code to act as a gatekeeper for the video, which led to the exploitation of VPAID for client-side arbitration.
- SIVIC also has to account for the SSAI use case - in this case, the video ad is part of an ongoing video stream delivered by the publisher and the SIVIC code is downloaded and executed on a parallel path to the stream.

<img width="100%" src="images/vpaid-player.png" alt="Diagram showing interaction between video player and VPAID">

Issue: the diagram above will need to be revised to account for SSAI and non-SSAI scenarios

## Cross-Platform Support ## {#cross-platform}

As was the case with VPAID, and perhaps more so given the additional abstraction provided by including a {{VideoProxy}} element, SIVIC is designed to be a cross-platform standard, and should be the preferred standard for enabling advanced video creative on any device capable of supporting the execution of ad-resident code on the device, including desktop, mobile and OTT.

## Scope and Limitation ## {#scope}

The most important change in scope between VPAID and the SIVIC specification is that SIVIC is now only intended to be used to support advanced video creative. Verification and viewability are now handled by the Open Measurement spec, and part of the rationale for revising SIVIC is clarifying and narrowing the usage of code by ad vendors to support the publishers’ need for security and performance. Any use of the SIVIC spec to support something other than interactive or dynamic content within the ad unit should be by default considered as counter to the intentions of the spec.

Another out-of-scope consideration for this spec is that there may be cases where the device is not capable or not willing to execute third-party code alongside the video. In these cases an alternate “thin client” solution may need to be provided using VAST or another approach, but it will not be addressed here. An example of advanced creative supported by VAST include end cards executed using VAST companion assets, as well as proprietary ad units developed by several mobile SDKs to support advanced video executions in a manner that is easily pre-cached.

## Market Needs ## {#market-needs}

The VPAID spec that preceded the SIVIC spec was outlined to follow general principles, some of which are generally accepted good design principles (simplicity, portability, consistency) and others of which reinforce at this point relatively well-known aspects of the relationship between the player and the ad (the player is in control, and implements support for the full spec to support a variety of ad units, whereas a given ad unit implements only the aspects of the spec that it needs).

In the hopes of going a bit deeper than the abstract principles underlying the spec in this new revision, instead we reflect below the market needs driving the replacement of VPAID with SIVIC.

- Publisher needs:
    - Security
    - Performance
    - Low latency
    - Protection of publisher page creative elements from ad code
    - The minimization of errors and playback issues

- Agency/advertiser/ad platform needs:
    - Maximum creative control, without interfering with publisher needs above
    - Access to player-managed capabilities like fullscreen
    - Ability to pass data into the creative
    - A defined interface for communicating with elements outside the player and ad
    - Ability to understand playback environment/device capabilities that may be required for creative execution
    - The ability to correlate the measurement of interactive events with other measurement now happening outside of VPAID (eg viewability and verification)

- Needs of both:
    - Document clarity - we should be careful to minimize any confusion about how to implement a player or recognized ad format
    - Position relative to other standards (VAST, OMID, etc) in any cases of overlap or potential confusion

## Primary Use Cases ## {#use-cases}

The standards revisions in this document intend to support scalable, performant interactive video execution in the following cases
- Server-side ad insertion, with interactive creative operating in parallel to a publisher-controlled video stream
- Mobile and other bandwidth-constrained scenarios that require pre-loading of assets to enable instant playback
- Desktop and other playback scenarios currently executed via VPAID, with a reduction in errors, non-standard executions, and performance and security issues. The significant change between VPAID and SIVIC for these scenarios is that video playback control now resides with the publisher player in all cases.
- In service of all of the above, it is also understood that this version of the SIVIC spec should be interoperable with VAST 4.1.
- In all cases the understanding is that the playback environment (device and platform) support and permit the execution of code as required by SIVIC.

## Video Player Requirements ## {#player-reqs}

The video player must implement ad loading, check for presence of SIVIC, manage video playback, and if present, implement the correct SIVIC version. Recovery mechanisms should also be in place should the ad unit fail to follow specified protocols correctly. For example, if the video player does not receive the AdStopped event from an ad unit after sending a call to {{Ad/stopAd}}, the video player should be prepared to react appropriately.

[[#ad-completion]] provides details on error handling and recommended recovery action for specific timeout situations.

### Displaying Ad Unit Creative ### {#displaying-creative}

The video advertising industry expects that an impression has indicated that an ad was viewed by an end user. Therefore, the video player should ensure that no other visual elements from the video player, the webpage, or other ads, display over a video ad that is currently in progress.

Also, since video ad creative are expected to adhere to industry guidelines that include a “Close X” button, the video player should not include its own close button for SIVIC ad units.

## Ad Unit Requirements ## {#ad-reqs}

If the ad unit implements SIVIC, it must indicate the correct version. The ad unit must implement all methods and properties listed, but can either decline from responding or returning a value that indicates that the method or property is not supported.

The ad unit should never allow uncaught exceptions to be thrown during calls into SIVIC from the video player. See Implementation sections for more specific requirements.

# API Reference # {#api}

## Referencing a SIVIC creative from VAST ## {#api-vast}

When a SIVIC creative is referenced from a VAST document, the value for the apiFramework attribute in the `InteractiveCreativeFile` element must be `SIVIC` (all caps). This attribute identifies the SIVIC API for the creative. Version information should be handled by the {{Ad/handshakeVersion()}} method (rather than identified in the VAST file).

Another attribute of the `InteractiveCreativeFile` is `variableDuration` which identifies whether the ad always drops when the duration is reached, or if it can potentially extend the duration by pausing the underlying video or delaying the `adStopped` event after `adVideoComplete`.

## How to Handle Ad Loading ## {#api-ad-loading}

The player must follow this workflow for loading an ad.
1. Player creates an element for the SIVIC creative to live in. For HTML this must be an iframe. The iframe must overlay the video player. The ad slot must be a div that is inside the iframe. The ad unit should always expect to be rendered in a secure iframe without access to any elements outside the iframe.
2. Player loads the JavaScript for the SIVIC creative in the iframe. Listen for the script's `onLoad` event and call {{getSIVICAd}} on the iframe window's global scope to get a reference to the ad.
3. Player calls {{Ad/handshakeVersion()}} to get the SIVIC API version of the ad (for compatibility) while passing in the highest version it supports itself.
4. Players calls {{Ad/initAd()}} with parameters {{Ad/initAd(creativeData, envData)/creativeData}} and {{Ad/initAd(creativeData, envData)/envData}}. The {{EnvironmentData}} object will contain the {{EnvironmentData/slot}} and {{EnvironmentData/videoProxy}} for the ad to render creative elements and control video playback respectively. The ad will load all required assets and elements into the ad slot. The ad will call `AdLoaded` when done loading.
5. Player waits for video to start buffering, or for point in stream of video start. Player calls {{Ad/startAd}} and wait for `AdStarted`. If `AdStarted` is not immediately fired, the player should assume that there was an error (see [[#errors]]).

Issue: need to define the definitions of the {{ViewMode}} enum values

When calling {{Ad/initAd()}}, the player shall provide the following parameters:

- {{Ad/initAd(creativeData, envData)/creativeData}}: object used for additional initialization data. {{CreativeData}} is used to pass information associated with the creative (sometimes taken from VAST). In a VAST context, the ad unit should pass the value for either the `Linear` or `Nonlinear` `AdParameter` element specified in the VAST document.
    - {{CreativeData/adParameters}}: ad parameters from VAST, or an empty string if unknown
    - {{CreativeData/adId}}: the ID of the ad from VAST, or an empty string if unknown
    - {{CreativeData/creativeId}}: the ID from the creative or an empty string if unknown
    - {{CreativeData/adServingId}}: Quasi-unique id generated by ad server and passed through all 1st and 3rd party reporting to facilitate the marriage of impression-level data across multiple reporting systems. In VAST 4.1 and later this id is provided in the `AdServingID` node.

- {{Ad/initAd(creativeData, envData)/envData}}: object used for passing implementation-specific runtime variables. {{EnvironmentData}} is used to pass information associated with the publisher playback environment. The object should have the following fields.
    - {{EnvironmentData/slot}}: the container where the ad renders. For HTML5, this should be a div.
    - {{EnvironmentData/videoProxy}}: an implementation of the {{VideoProxy}} interface given in this spec
    - {{EnvironmentData/width}}: indicates the display area width in pixels
    - {{EnvironmentData/height}}: indicates the display area height in pixels
    - {{EnvironmentData/viewMode}}: indicates the view mode for the video player as defined by the publisher. Must be one of the values of the {{ViewMode}} enum.
        - {{ViewMode/normal}}
        - {{ViewMode/thumbnail}}
        - {{ViewMode/fullscreen}}
    - {{EnvironmentData/fullscreenAllowed}}: primarily used to choose to display or not display a fullscreen option
    - {{EnvironmentData/variableDurationAllowed}}: If set to true the player must allow the SIVIC creative to pause player-controlled video playback during the ad. If `false` it will not (live streaming is a use case). An example use case here is a clickthru overlays, where `variableDuration` (ad requirement) is `false`, but {{EnvironmentData/variableDurationAllowed}} (publisher capability) can be `true` or `false`. It should not be used in any case where disallowing the pause interferes with the ad KPIs (for example if it can interfere with completions, time spent in an interactive component, etc).
    - {{EnvironmentData/skippableState}}: indicates whether the ad may be skippable and which party controls the skippability, must be one of the {{SkippableState}} enum values.
        - {{SkippableState/playerHandles}}: The player will render a skip button and might skip the ad.
        - {{SkippableState/adHandles}}: The ad may or may not render a skip button.
        - {{SkippableState/notSkippable}}: The ad cannot be skipped and the SIVIC creative should not render a skip button. This may be common in DAI for live streams.
    - {{EnvironmentData/siteUrl}}: indicating the website the ad will play on, for example if the site was `www.xyz.com/videoId`, this information would include at least `www.xyz.com`. The player may give more information. Desired for reporting and troubleshooting.
    - {{EnvironmentData/appId}}: the id of the app if applicable
    - {{EnvironmentData/sdkName}}: the name of an SDK implementing SIVIC creative playback (if applicable)
    - {{EnvironmentData/sdkVersion}}: an SDK version (if applicable)
    - {{EnvironmentData/deviceId}}: IDFA or AAID would be used primarily for 3rd party tracking of custom events

The video file (specified in VAST) will be loaded by the player.

To assist in preloading assets the {{Ad/initAd()}} function must be called first. The player should call this function early enough before playback so that assets can be displayed as soon as the ad starts.

The ad, however, should not assume that it has any amount of time between the {{Ad/initAd()}} call and the {{Ad/startAd}} call. For example a preroll might call {{Ad/startAd}} immediately after {{Ad/initAd()}}. Nothing should be displayed by the SIVIC creative until {{Ad/startAd}} is called.

## How to Handle Ad Playback ## {#api-ad-playback}

The video player is responsible for handling playback of the video as well as tracking video related events. The SIVIC creative on the other hand handles playback of interactive content and internal tracking related to interactivity (custom events, creative impression if desired (recommended)). The SIVIC creative should use the {{VideoProxy}} to modify the video stream in any way, and to subscribe to video playback related events.

### Ad Pause ### {#api-ad-pause}

If the {{EnvironmentData/variableDurationAllowed}} flag is set to `true` then the {{VideoProxy}} should enable video pause by the SIVIC creative via the {{VideoProxy/pause}} function. The {{VideoProxy}} must respond to {{VideoProxy/pause}} with the `AdPaused` event.

When the SIVIC creative would like to resume video playback, it should call the {{VideoProxy/resume}} function on the {{VideoProxy}}. The {{VideoProxy}} must respond to {{VideoProxy/resume}} with the `AdPlaying` event.

### Ad Quartiles and Playback Events ### {#api-quartiles}

The {{VideoProxy}} must dispatch quartiles and playback events.

The SIVIC creative may subscribe to any video playback events dispatched by the {{VideoProxy}} (`AdVideoStarted`, `AdImpression`, `AdFirstQuartile`, `AdSecondQuartile`, `AdThirdQuartile`, `AdVideoComplete`)

Issue: consider renaming `AdSecondQuartile` to `AdMidpoint` to match VPAID

The SIVIC creative at any time may poll the {{VideoProxy}} for playhead location relative to the beginning of the ad, which must be accurate and up to date at all times.

Issue: how can accurateness be guaranteed across an async secure iframe?

### Ad Resizing and Fullscreen ### {#api-resizing}

Issue: can width / height coordination not be done through the iframe width height, which would not require any API?

The {{VideoProxy}} has the {{VideoProxy/resize(width, height)}} method which changes only the size of the video. The {{VideoProxy}} also has {{VideoProxy/setLocation(x, y)}} which positions the video relative to the top left corner of the ad slot.

The player may resize the ad slot. The player must call {{Ad/resizeAd(width, height, viewMode)}} any time the ad slot size is changed.

If {{EnvironmentData/fullscreenAllowed}} is `true`, the SIVIC creative may invoke the {{VideoProxy/fullscreen}} method. The player must resize only the ad slot to fullscreen (not the video). The SIVIC creative then will resize the video as it sees fit. The player must call {{Ad/resizeAd(width, height, viewMode)}} on the SIVIC creative with {{Ad/resizeAd(width, height, viewMode)/viewMode}} set to {{ViewMode/fullscreen}} and {{Ad/resizeAd(width, height, viewMode)/width}} and {{Ad/resizeAd(width, height, viewMode)/height}} set to the full screen dimensions.

If player goes fullscreen on its own, it must also call {{Ad/resizeAd(width, height, viewMode)}} on the SIVIC creative with {{Ad/resizeAd(width, height, viewMode)/viewMode}} set to {{ViewMode/fullscreen}} and {{Ad/resizeAd(width, height, viewMode)/width}} and {{Ad/resizeAd(width, height, viewMode)/height}} set to the full screen dimensions. It must only resize the ad slot.

Issue: should the player not also resize the video slot?

### Ad Volume ### {#api-volume}

The volume set on the {{VideoProxy}} should be respected by the ad unit when initialized.

## How to Handle Ad End and Unload ## {#api-end}

There are three cases where an ad has ended:
1. Ad was skipped, either by player or internally by the ad (if the ad contains the skip button). See [[#api-skip]].
2. Ad has fired `AdStopped` event, either in response to {{Ad/stopAd}} or after ad experience has ended.
3. Ad errors out. See [[#api-error]].

### Ad Skips ### {#api-skip}

**Skip Ad Handled by Player**
1. The player calls {{Ad/skipAd}} on the ad.
2. The ad dispatches `AdSkipped`.
3. The player fires any skip tracking pixels.
4. The ad cleans up and dispatches `AdStopped`.
5. The player unloads the ad.

**Skip Ad Handled by Ad**
1. The ad dispatches `AdSkipped`.
2. The player fires any skip tracking pixels.
3. The ad cleans up and dispatches `AdStopped`.
4. The player unloads the ad.

Issue: the {{Ad}} interface currently does not offer any event registration system for the player to register handlers

### Ad Ends Before Video Completion ### {#api-end-before-complete}

This scenario applies when the ad chooses to signal the player to kill it, typically at the prompting of the viewer. A good example would be a survey that allows the viewer to skip immediately to content when completed.
1. The ad cleans up and dispatches `AdStopped`.
2. The player unloads the ad.

### Ad Extends Beyond Video Completion ### {#api-extend}

This scenario is only possible when the {{EnvironmentData/variableDurationAllowed}} flag is set to `true`. Video duration must only be extended in response to user interaction.
1. User interacts at any point during playback of the video, triggering extended ad portion.
2. Ad dispatches `AdDurationChange` event, and exposes the new duration of the ad via the {{Ad/adDuration}} property (if the extended version is `x` seconds then {{Ad/adDuration}} would be `videoProxy.duration + x`).
3. The {{VideoProxy}} dispatches `AdVideoComplete` event.
4. The ad enters its extended phase.
5. The ad dispatches `AdStopped` when extended phase is finished.

Issue: clarify the value of the {{Ad/adDuration}} property as the current text does not seem to make much sense

### Ad Completes at Video Completion ### {#api-complete}

When an ad finishes at the same time as its video.
1. Proxy video element raises the `AdVideoComplete` event upon video completion.
2. Player calls {{Ad/stopAd}}
3. Ad dispatches `AdStopped` event after it cleans up.

### Ad Errors Out ### {#api-error}

The SIVIC creative or the player may terminate the ad unit with an error at any time. If the SIVIC creative indicates an error, the player should try to stop ad unit playback. This might not be possible in server side stitched ads.

The player should terminate the ad with an error if the version returned by {{Ad/handshakeVersion()}} is not supported.

The player may error out if the ad does not respond with `AdLoaded` and `AdStarted` in a reasonable amount of time.

When an ad errors out it must follow these steps.
1. The {{Ad}} will dispatch `AdError(errorCode, errorMessage)`
2. The player calls {{Ad/stopAd}} on the {{Ad}}.
3. The {{Ad}} dispatches `AdStopped` when it is done cleaning up.

### Additional Notes ### {#api-notes}

The player may call {{Ad/stopAd}} at any time. The creative should respond with `AdStopped` after finishing its ad end logic. The player should allow 1 second between calling {{Ad/stopAd}} and receiving `AdStopped`. The implementer of the SDK should take into consideration that dropping a SIVIC ad unit before it has dispatched AdStopped may result in discrepancies, and that calling {{Ad/stopAd}} before the ad experience has ended (which is AFTER the optional lean-in phase) could harm the overall ad experience.

The SIVIC creative may also dispatch `AdStopped` at any time, signaling to the player that the ad has finished and unloaded. Any further interaction with the SIVIC creative after `AdStopped` may not result in the desired outcome. The same is true for `AdError`.

# Protocol Details # {#protocol}

## Objects ## {#objects}

### Entry Point ### {#entry-point}

<xmp class="idl">
  partial interface mixin Window {
    [SameObject] Ad getSIVICAd();
  };
</xmp>

### Ad Interface ### {#object-ad}

<xmp class="idl">
interface Ad {
  string handshakeVersion(string supportedVersion);
  void initAd(CreativeData creativeData, EnvironmentData envData);
  void startAd();
  void stopAd();
  void skipAd();
  void resizeAd(float width, float height, ViewMode viewMode);
  readonly attribute float adWidth;
  readonly attribute float adHeight;
  readonly attribute float adDuration;
};
</xmp>

: {{Ad/handshakeVersion()}}
:: Negotiates version support between the player and ad. The player passes {{Ad/handshakeVersion(supportedVersion)/supportedVersion}} set to the highest version it supports. {{Ad/handshakeVersion}} returns the version it supports.

Issue: consider passing `supportedVersion` on the {{getSIVICAd()}} function call, so the ad can respond with an object that matches the requested API

: {{Ad/adDuration}}
:: The full duration of the ad experience, including video and extended features

### VideoProxy Interface ### {#object-video-proxy}

<xmp class="idl">
interface VideoProxy {
  void removeEventListener(string eventName, any eventHandler);
  void addEventListener(string eventName, any eventHandler);
  void pause();
  void fullscreen();
  void resume();
  void resize(float width, float height);
  void setLocation(float x, float y);
  readonly attribute float duration;
  readonly attribute float currentTime;
  readonly attribute float playbackRate;
  readonly attribute boolean ended;
  readonly attribute boolean paused;
  readonly attribute boolean muted;
  readonly attribute float volume;
};
</xmp>

### Creative Data ### {#object-creative-data}

<xmp class="idl">
dictionary CreativeData {
  required string adParameters;
  required string adId;
  required string creativeId;
  required string adServingId;
};
</xmp>

### Environment Data ### {#object-env-data}

<xmp class="idl">
dictionary EnvironmentData {
  required DOMElement slot;
  required VideoProxy videoProxy;
  required float width;
  required float height;
  required ViewMode viewMode;
  required boolean fullscreenAllowed;
  required boolean variableDurationAllowed;
  required SkippableState skippableState;
  string siteUrl;
  string appId;
  string sdkName;
  string sdkVersion;
  string deviceId;
};

enum ViewMode {"normal", "thumbnail", "fullscreen"};
enum SkippableState {"playerHandles", "adHandles", "notSkippable"};
</xmp>

## Error Handling and Timeouts ## {#errors}

## Ad Completion ## {#ad-completion}

# Security # {#security}

# Examples # {#examples}

# Language-Specific Implementation Details # {#lang-specific}

# Terminology # {#terminology}

: <dfn>SIVIC VAST</dfn>
:: The VAST document that contains the SIVIC ad unit components.

: <dfn>SIVIC Ad Unit</dfn>
:: The SIVIC ad video and the SIVIC ad creative.

: <dfn>SIVIC Video</dfn>
:: The SIVIC ad video component if it's a progressively downloaded video file.

: <dfn>SIVIC Video Stream</dfn>
:: The SIVIC ad video component if it's SSAI video.

: <dfn>SIVIC Live Video Stream</dfn>
:: The SIVIC ad video component if live streaming video.

: <dfn>SIVIC Creative</dfn>
:: The SIVIC ad creative component (html doc and assets) that overlays the SIVIC ad video.

: <dfn>SIVIC Secondary Video</dfn>
:: Video assets that are loaded as part of the SIVIC creative and not the primary video.

: <dfn>Content Video</dfn>
:: Any reference to video that is NOT a component or asset of the ad unit.
